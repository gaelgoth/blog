<?xml version='1.0' encoding='utf-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://blog.gothuey.dev/</id>
  <title><![CDATA[Gaël G.]]></title>
  <subtitle><![CDATA[Blog]]></subtitle>
  <icon>https://blog.gothuey.dev/favicon.png</icon>
  <link href="https://blog.gothuey.dev" />
  <link href="https://blog.gothuey.dev/atom.xml" rel="self" type="application/atom+xml" />
  <updated>2025-01-25T23:45:09.213Z</updated>
  <author>
    <name><![CDATA[Gaël G.]]></name>
  </author>
  <category term="TypeScript" scheme="https://blog.gothuey.dev/?tags=TypeScript" />
  <category term="Web" scheme="https://blog.gothuey.dev/?tags=Web" />
  <category term="DevOps" scheme="https://blog.gothuey.dev/?tags=DevOps" />
  <category term="Home lab" scheme="https://blog.gothuey.dev/?tags=Home%20lab" />
  <category term="Container" scheme="https://blog.gothuey.dev/?tags=Container" />
  <category term="API" scheme="https://blog.gothuey.dev/?tags=API" />
  <category term="Go" scheme="https://blog.gothuey.dev/?tags=Go" />
  <entry>
    <title type="html"><![CDATA[Platform Engineering: Building a portal for Developers with Backstage]]></title>
    <link href="https://blog.gothuey.dev/2024/backstage-medium-post" />
    <id>https://blog.gothuey.dev/2024/backstage-medium-post</id>
    <published>2024-05-17T00:00:00.000Z</published>
    <updated>2025-01-25T23:43:32.796Z</updated>
    <summary type="html"><![CDATA[My Medium Post about Backstage.io]]></summary>
    <content type="html">
      <![CDATA[<h2 id="check-out-my-article-on-backstage" data-svelte-h="svelte-1y2srpg"><a href="#check-out-my-article-on-backstage">Check out my article on Backstage</a></h2> <p data-svelte-h="svelte-1y2qu9">I wrote an <a href="https://medium.com/elca-it/platform-engineering-building-a-portal-for-developers-with-backstage-c51e74662eba" rel="nofollow noopener noreferrer external" target="_blank">article</a> about the adoption of <a href="https://backstage.io/" rel="nofollow noopener noreferrer external" target="_blank">Backstage</a> as a central hub for developers in my company. My team and I oversee 600 projects with assets on both public cloud and on-premises, including Jenkins controllers and Azure subscriptions.</p> <p data-svelte-h="svelte-1mdtdzr">In this <a href="https://medium.com/elca-it/platform-engineering-building-a-portal-for-developers-with-backstage-c51e74662eba" rel="nofollow noopener noreferrer external" target="_blank">Medium post</a>, I present how Backstage serves as an Internal Developer Platform (IDP), streamlining the management of these diverse resources and providing self-service capabilities for software engineering Teams in <a href="https://www.elca.ch/en" rel="nofollow noopener noreferrer external" target="_blank">ELCA</a> company.</p> <p data-svelte-h="svelte-lk2tde">I worked the last few months on integrating and developing custom plugins for self-service tooling and asset management. The stack of a Backstage plugin is quite standard:</p> <ul data-svelte-h="svelte-1r30gn5"><li>Backstage is a monorepo structure with plugins in separate folders.</li> <li>In the frontend, we use React.</li> <li>The backend uses NodeJS and Express for APIs.</li></ul> <p data-svelte-h="svelte-qdw51u">Now, this Backstage instance is in production and also used by developers to deploy and manage their resources</p> <p data-svelte-h="svelte-8sqnwl">For more information, please consult the article on Medium 😉</p> <div class="alert shadow-inner" data-svelte-h="svelte-pjo7wa"><div><span class="text-lg i-simple-icons-github !w-5 !h-5"></span> <div><a href="https://medium.com/elca-it/platform-engineering-building-a-portal-for-developers-with-backstage-c51e74662eba"><h3 class="font-bold my-0">Medium Post</h3></a> <div class="text-xs">Platform Engineering: Building a portal for Developers with Backstage</div></div></div></div>]]>
    </content>
    <category term="TypeScript" scheme="https://blog.gothuey.dev/?tags=TypeScript" />
    <category term="Web" scheme="https://blog.gothuey.dev/?tags=Web" />
    <category term="DevOps" scheme="https://blog.gothuey.dev/?tags=DevOps" />
  </entry>
  <entry>
    <title type="html"><![CDATA[How to use DNS and TLS in your homelab]]></title>
    <link href="https://blog.gothuey.dev/2023/dns-setup-homelab" />
    <id>https://blog.gothuey.dev/2023/dns-setup-homelab</id>
    <published>2023-08-01T00:00:00.000Z</published>
    <updated>2025-01-25T23:43:32.794Z</updated>
    <summary type="html"><![CDATA[Easy TLS certificate set up with Nginx Proxy Manager]]></summary>
    <content type="html">
      <![CDATA[<h2 id="introduction" data-svelte-h="svelte-ccveyw"><a href="#introduction">Introduction</a></h2> <p data-svelte-h="svelte-90rfaz">In this blog post, we’ll explore an efficient method to set up domain names and valid TLS certificates for your home lab services without exposing them to the public internet. We’ll achieve this by using a reverse proxy and obtaining a valid certificate from Let’s Encrypt, a widely (and free) recognized Certificate Authority (CA).</p> <h3 id="why-using-dns-in-my-homelab-" data-svelte-h="svelte-14ah83r"><a href="#why-using-dns-in-my-homelab-">Why using DNS in my homelab ?</a></h3> <p data-svelte-h="svelte-1dolp5z">I opted to purchase the domain name gothuey.dev from <a href="https://www.infomaniak.com/en/domains" rel="nofollow noopener noreferrer external" target="_blank">Infomaniak</a>. While there are free alternatives available, such as <a href="https://www.duckdns.org/" rel="nofollow noopener noreferrer external" target="_blank">Duck DNS</a>. In my case, I’m going to do the set-up with a domain name purchased from Infomaniak.</p> <p><picture><source srcset="/_app/immutable/assets/example-with-dashboard.7aGqgxQ3.avif 736w" type="image/avif"> <img src="/2023/dns-setup-homelab/example-with-dashboard.webp" alt="Demo with homelab dashboard" class="rounded-lg my-2" loading="lazy" decoding="async"></picture></p> <p data-svelte-h="svelte-4h1ay3">The objective I’m striving for involves utilizing my domain directly – for instance, <code>service.homelab.gothuey.dev</code> (as seen with <code>grafana.homelab.gothuey.dev</code>). This approach empowers me to establish subdomains for various home lab services (Grafana, Jellyfin,.PairDrop,…). By doing so, each service gains a unique and easily recognizable identity, eliminating the need to rely on IP addresses and ports for access.</p> <p data-svelte-h="svelte-1lpvncv">Keep in mind that the setup described in this guide is geared towards optimizing accessibility and organization within a <strong>local network</strong> context. All my services are not exposed outside my network.</p> <h2 id="set-up" data-svelte-h="svelte-1rgn96p"><a href="#set-up">Set up</a></h2> <p data-svelte-h="svelte-1rxh0l">Popular reverse proxies like Nginx, Apache, Swag, or Traefik are excellent choices for setting up in your home lab services. Consider selecting one that aligns with your preferences and suits your specific setup requirements.</p> <p data-svelte-h="svelte-bnwp20">In my scenario, I elected to employ Nginx Proxy Manager (NPM) due to its user-centric configuration process. This tool boasts an intuitive setup, rendering it an optimal choice for individuals who are either newcomers to reverse proxies or enthusiasts of a more simplified configuration journey. Of notable significance, NPM comes equipped with a feature that stands out: native support for <a href="https://letsencrypt.org/docs/challenge-types/#dns-01-challenge" rel="nofollow noopener noreferrer external" target="_blank">Let’s Encrypt Challenge DNS-01</a>, right out of the box.</p> <h3 id="1-install-nginx-proxy-manager-npm" data-svelte-h="svelte-fqfa33"><a href="#1-install-nginx-proxy-manager-npm">1: Install Nginx Proxy Manager (NPM)</a></h3> <p data-svelte-h="svelte-1mjrrl0">For my homelab, which primarily relies on Docker, we can easily install Nginx Proxy Manager (NPM) using the following docker-compose.yml configuration. To proceed, you can follow the steps outlined in the Quick Setup guide available at <a href="https://nginxproxymanager.com/guide/#quick-setup" rel="nofollow noopener noreferrer external" target="_blank">https://nginxproxymanager.com/guide/#quick-setup</a>.</p> <!-- HTML_TAG_START --><pre class="shiki material-default" yaml="true"><div class="language-id">yaml</div><div class='code-container'><code><div class='line'>version: '3.8'</div><div class='line'>services:</div><div class='line'>  app:</div><div class='line'>    image: 'jc21/nginx-proxy-manager:latest'</div><div class='line'>    restart: unless-stopped</div><div class='line'>    ports:</div><div class='line'>      - '80:80'</div><div class='line'>      - '81:81'</div><div class='line'>      - '443:443'</div><div class='line'>    volumes:</div><div class='line'>      - ./data:/data</div><div class='line'>      - ./letsencrypt:/etc/letsencrypt</div><div class='line'></div></code></div></pre><!-- HTML_TAG_END --> <h3 id="2-set-up-a-domain-name-infomaniak" data-svelte-h="svelte-16p6egr"><a href="#2-set-up-a-domain-name-infomaniak">2: Set up a domain name (Infomaniak)</a></h3> <p data-svelte-h="svelte-1ylr6c1">At your Infomaniak manager <a href="https://manager.infomaniak.com/v3/298166/ng/products/web/domains" rel="nofollow noopener noreferrer external" target="_blank">dashboard</a>, choose the domain you want to use.</p> <ol><li data-svelte-h="svelte-1fbcwt7"><p>Select Change the DNS zone and then click on the ADD AN ENTRY button. Here, you can define how you want to design your domain name.</p></li> <li><p data-svelte-h="svelte-1324p8y">Create two entries as follows:</p> <p data-svelte-h="svelte-1koj2em">The first entry should be of <strong>TYPE A</strong>, which will point your domain to your private homelab IP address.</p> <!-- HTML_TAG_START --><pre class="shiki material-default" text="true"><div class="language-id">text</div><div class='code-container'><code><div class='line'>    Type: A</div><div class='line'>    Source: homelab.gothuey.dev (replace by your domain name)</div><div class='line'>    target: 192.168.1.3 (replace by your private IP)</div><div class='line'>    TTL: 1 hour</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h="svelte-yblaeo">The second entry should be of <strong>TYPE CNAME</strong>, enabling the creation of subdomains like <code>grafana.your-domain.com</code></p> <!-- HTML_TAG_START --><pre class="shiki material-default" text="true"><div class="language-id">text</div><div class='code-container'><code><div class='line'>Type: CNAME</div><div class='line'>Source: *.homelab.gothuey.dev (replace by your domain name)</div><div class='line'>target: homelab.gothuey.dev</div><div class='line'>TTL: 1 hour</div></code></div></pre><!-- HTML_TAG_END --></li></ol> <p data-svelte-h="svelte-inyfxa">After making the necessary DNS changes, it may take several minutes for your domain to become fully available. To check the availability and ensure the correct configuration, you can use the <code>dig</code> command. When the setup is successful, you should see your private homelab address associated with the A record for your domain.</p> <!-- HTML_TAG_START --><pre class="shiki material-default" shell="true"><div class="language-id">shell</div><div class='code-container'><code><div class='line dim'>$ dig homelab.gothuey.dev</div><div class='line'></div><div class='line dim'>; &lt;&lt;&gt;&gt; DiG 9.16.1-Ubuntu &lt;&lt;&gt;&gt; homelab.gothuey.dev</div><div class='line dim'>;; global options: +cmd</div><div class='line dim'>;; Got answer:</div><div class='line dim'>;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 42085</div><div class='line dim'>;; flags: qr rd ad; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0</div><div class='line dim'>;; WARNING: recursion requested but not available</div><div class='line'></div><div class='line dim'>;; QUESTION SECTION:</div><div class='line dim'>;homelab.gothuey.dev.           IN      A</div><div class='line'></div><div class='line highlight'>;; ANSWER SECTION:</div><div class='line highlight'>homelab.gothuey.dev.    0       IN      A       192.168.1.3</div><div class='line'></div><div class='line dim'>;; Query time: 19 msec</div><div class='line dim'>;; SERVER: 172.30.240.1#53(172.30.240.1)</div><div class='line dim'>;; WHEN: Tue Aug 01 16:31:45 CEST 2023</div><div class='line dim'>;; MSG SIZE  rcvd: 72</div><div class='line'></div></code></div></pre><!-- HTML_TAG_END --> <h3 id="3-issue-a-token-for-certbot-infomaniak" data-svelte-h="svelte-p131ko"><a href="#3-issue-a-token-for-certbot-infomaniak">3: Issue a token for CertBot (Infomaniak)</a></h3> <p data-svelte-h="svelte-3ty63g">As mentioned earlier, Nginx Proxy Manager has the capability to generate and manage TLS certificates for use. It utilizes the <a href="https://github.com/Infomaniak/certbot-dns-infomaniak" rel="nofollow noopener noreferrer external" target="_blank">certbot-dns-infomaniak</a> plugin behind the scenes, which necessitates a token from your Infomaniak dashboard for proper functioning.</p> <ol data-svelte-h="svelte-7czxez"><li>At your Infomaniak manager <a href="https://manager.infomaniak.com/v3/infomaniak-api" rel="nofollow noopener noreferrer external" target="_blank">dashboard</a>, to to the API section and generate a token with “Domain” scope.</li> <li><strong>Keep</strong> this token somewhere safe as we will use it in the next step.</li></ol> <h3 id="4-add-new-certificate-in-npm" data-svelte-h="svelte-ath4e2"><a href="#4-add-new-certificate-in-npm">4: Add new certificate in NPM</a></h3> <ol data-svelte-h="svelte-8xi3oi"><li>Go to Nginx Proxy Manager (<a href="http://192.168.1.3:81/" rel="nofollow noopener noreferrer external" target="_blank">http://192.168.1.3:81/</a>) and navigate to the SSL <strong>Certificates</strong> tab.</li> <li>Click on “Add SSL Certificate” and select “Let’s Encrypt.”</li> <li>Configure your Let’s Encrypt Certificate as follows:<ul><li><strong>Domain Names</strong>: Add the domain and subdomain records.-Enable the <strong>Use a DNS challenge</strong> option.</li> <li>DNS Provider: Select “Infomaniak.”</li> <li><strong>Credentials File Content</strong>: Replace x values with the token issued in the last step.</li></ul></li> <li>Click on the Save button to save the configuration.</li></ol> <p data-svelte-h="svelte-1r684pz">If the configuration is completed successfully, you should be able to see your certificate.</p> <p><picture><source srcset="/_app/immutable/assets/add-new-certificate.CaNWDbpD.avif 736w" type="image/avif"> <img src="/2023/dns-setup-homelab/add-new-certificate.webp" alt="Generate Certificate" class="rounded-lg my-2" loading="lazy" decoding="async"></picture></p> <h3 id="5-using-dns-with-services" data-svelte-h="svelte-1019cv2"><a href="#5-using-dns-with-services">5: Using DNS with services</a></h3> <p data-svelte-h="svelte-1nifqyk">Now we are ready to set up a proxy entry.  In my case, I would like to direct requests from my Grafana instance, <code>grafana.homelab.gothuey.dev</code>, to be redirected to <code>http://HOMELAB_IP:3002</code>.</p> <ol data-svelte-h="svelte-iul4cr"><li>Begin by navigating to the “Proxy Hosts” tab and selecting “Add Proxy Host.”</li> <li>Configure your host (<strong>⚡Details</strong> tab)<ul><li><strong>Domain Name</strong>s**: <code>HOMELAB_SERVICE.your.domain.name</code></li> <li><strong>Scheme</strong>: http</li> <li><strong>Forward Hostname / IP</strong>: <code>HOMELAB_IP</code></li> <li><strong>Forward Port</strong>: <code>SERVICE_PORT</code></li> <li>Feel free to adjust other settings according to your requirements.</li></ul></li></ol> <img src="/2023/dns-setup-homelab/set-up-host.webp" alt="Set up host" width="400"> <p data-svelte-h="svelte-175gz6m">Next, proceed to the  <strong>🛡️SLL</strong> tab o choose an SSL certificate for this host:</p> <ul data-svelte-h="svelte-1lp8z3j"><li><strong>SSL Certificate</strong>: Choose the certificate that was created during <a href="#4-add-new-certificate-in-npm">4: Add new certificate in NPM</a></li> <li>Enable <strong>Force SSL</strong> and <strong>HTTP/2 Support</strong></li> <li>Finally, click on the “Save” button to apply these settings</li></ul> <img src="/2023/dns-setup-homelab/select-ssl-certificate.webp" alt="Select certificate" width="400"> <h3 id="6-lets-test-the-set-up" data-svelte-h="svelte-1920rhn"><a href="#6-lets-test-the-set-up">6: Let’s test the set up</a></h3> <p data-svelte-h="svelte-1pntlwu">To confirm the proper functionality of our proxy setup, let’s conduct a straightforward test.</p> <p data-svelte-h="svelte-1fqzt6">Open your preferred web browser.</p> <p data-svelte-h="svelte-d490gz">In the address bar, enter the URL <a href="https://service.your.domain.name/" rel="nofollow noopener noreferrer external" target="_blank">https://service.your.domain.name/</a> and then press Enter.</p> <p data-svelte-h="svelte-5eqy1g">Upon completing the Grafana setup, my browser automatically redirected me to the Grafana instance situated at <code>http:/HOMELAB_IP:3002</code>. This seamless redirection granted me access to the Grafana dashboard without any SSL/TSL warning.</p> <p><picture><source srcset="/_app/immutable/assets/test-set-up.D9kr3pKU.avif 736w" type="image/avif"> <img src="/2023/dns-setup-homelab/test-set-up.webp" alt="Test proxy" class="rounded-lg my-2" loading="lazy" decoding="async"></picture></p> <h2 id="final-thoughts" data-svelte-h="svelte-2qh8hi"><a href="#final-thoughts">Final thoughts</a></h2> <p data-svelte-h="svelte-1665ptc">This solution provides a straightforward approach for achieving DNS-based access and SSL/TLS encryption without encountering SSL warnings for your local services.</p> <p data-svelte-h="svelte-1j3dsbe">If you’re interested in a visual guide, I recommend watching the <a href="https://youtu.be/qlcVx-k-02E?si=HQnJamrhbyYTaCKU" rel="nofollow noopener noreferrer external" target="_blank">“Quick and Easy SSL Certificates for Your Homelab!” video on Wolfgang’s Channel</a>. Although the video focuses on a similar setup using Duck DNS, the core principles align closely with what we’ve discussed here, offering an additional resource to guide you through the process.</p> <h2 id="useful-resources-" data-svelte-h="svelte-z3y4n5"><a href="#useful-resources-">Useful resources ✨</a></h2> <ul data-svelte-h="svelte-1kbbhsk"><li><a href="https://letsencrypt.org/docs/challenge-types/#dns-01-challenge" rel="nofollow noopener noreferrer external" target="_blank">Let’s Encrypt Challenge DNS-01</a></li> <li><a href="https://youtu.be/qlcVx-k-02E?si=HQnJamrhbyYTaCKU" rel="nofollow noopener noreferrer external" target="_blank">“Quick and Easy SSL Certificates for Your Homelab!” video on Wolfgang’s Channel</a></li> <li><a href="https://nginxproxymanager.com/" rel="nofollow noopener noreferrer external" target="_blank">Nginx Proxy Manager</a></li></ul>]]>
    </content>
    <category term="Home lab" scheme="https://blog.gothuey.dev/?tags=Home%20lab" />
    <category term="Container" scheme="https://blog.gothuey.dev/?tags=Container" />
  </entry>
  <entry>
    <title type="html"><![CDATA[Vaporflow Start page]]></title>
    <link href="https://blog.gothuey.dev/2023/vaporflow-startpage" />
    <id>https://blog.gothuey.dev/2023/vaporflow-startpage</id>
    <published>2023-04-29T00:00:00.000Z</published>
    <updated>2025-01-25T23:43:32.796Z</updated>
    <summary type="html"><![CDATA[A browser start page with daisyui distinctive aesthetic, featuring OpenWeather]]></summary>
    <content type="html">
      <![CDATA[<h2 id="introduction" data-svelte-h="svelte-ccveyw"><a href="#introduction">Introduction</a></h2> <p data-svelte-h="svelte-11dvti6">Recently, I decided to learn TypeScript by working on a small project called <a href="https://github.com/gaelgoth/vaporflow-startpage" rel="nofollow noopener noreferrer external" target="_blank">vaporflow-startpage</a>, a customizable browser start page. While I had some experience with JavaScript and Vue.js, I had never worked with TypeScript and React before. Here’s how I went about learning TypeScript through this project.</p> <div class="alert shadow-inner" data-svelte-h="svelte-1nqldhc"><div><span class="text-lg i-simple-icons-github !w-5 !h-5"></span> <div><a href="https://github.com/gaelgoth/vaporflow-startpage"><h3 class="font-bold my-0">gaelgoth/vaporflow-startpage</h3></a> <div class="text-xs">Vaporflow is a browser start page with daisyui distinctive aesthetic, featuring OpenWeather</div></div></div></div> <h2 id="the-idea" data-svelte-h="svelte-1d5x1gq"><a href="#the-idea">The idea</a></h2> <p data-svelte-h="svelte-ig5y1r">I started my TypeScript journey by using the <a href="https://github.com/Jonghakseo/chrome-extension-boilerplate-react-vite" rel="nofollow noopener noreferrer external" target="_blank">React Vite Boilerplate</a>, which provided a great starting point for building my own Chrome extension. While exploring various open source projects, I stumbled upon <a href="https://www.reddit.com/r/startpages/" rel="nofollow noopener noreferrer external" target="_blank">r/startpages</a> subreddit, where I discovered numerous custom browser start page projects. I was inspired by the designs and decided to create my own start page with a minimalist approach that suits my needs.</p> <h2 id="the-implementation" data-svelte-h="svelte-wxe7dj"><a href="#the-implementation">The implementation</a></h2> <p data-svelte-h="svelte-1gfn7l3">The code is very (very) simple and contains avoidable duplications. In addition to the bookmarks, I have integrated the weather display using OpenWeather and a theme picker. After completing my first version of the start page, I shared it on the r/startpage subreddit. To my surprise, it received a strong positive response from the community. This unexpected success has made vaporflow-startpage my most popular project to date 😄.</p> <iframe tile="reddit" src="https://embed.reddit.com/r/startpages/comments/11j3fm6/vaporflow_a_startpage_build_with_daisyui_tailwind/?embed=true&ref_source=embed&ref=share&utm_medium=widgets&utm_source=embedv2&utm_term=23&theme=dark&utm_name=post_embed" width="640" scrolling="no" allowfullscreen="true" sandbox="allow-scripts allow-same-origin allow-popups" height="500"></iframe> <h2 id="lessons-learned" data-svelte-h="svelte-3227es"><a href="#lessons-learned">Lessons Learned</a></h2> <p data-svelte-h="svelte-17f7p64">Working on <a href="https://github.com/gaelgoth/vaporflow-startpage" rel="nofollow noopener noreferrer external" target="_blank">vaporflow-startpage</a> has been an exciting journey for me to learn TypeScript and React. By starting with a boilerplate and exploring various open source projects, I was able to develop my own custom browser start page. Through this process, I learned the basics of TypeScript and React, as well as how to integrate APIs like OpenWeather.</p> <h2 id="conclusion" data-svelte-h="svelte-kmpttn"><a href="#conclusion">Conclusion</a></h2> <p data-svelte-h="svelte-10sbdjd">The positive response from the r/startpage community has been an added bonus and has inspired me to improve and maintain this small project. I look forward to creating more exciting projects in the future.</p> <h2 id="useful-resources-" data-svelte-h="svelte-z3y4n5"><a href="#useful-resources-">Useful resources ✨</a></h2> <ul data-svelte-h="svelte-hbj6o7"><li><a href="https://github.com/Jonghakseo/chrome-extension-boilerplate-react-vite" rel="nofollow noopener noreferrer external" target="_blank">Boilerplate React Vite</a></li> <li><a href="https://vitejs.dev/guide/api-plugin.html" rel="nofollow noopener noreferrer external" target="_blank">Vite Plugin</a></li> <li><a href="https://developer.chrome.com/docs/extensions/mv3/" rel="nofollow noopener noreferrer external" target="_blank">Chrome Extension with manifest 3</a></li> <li><a href="https://rollupjs.org/guide/en/" rel="nofollow noopener noreferrer external" target="_blank">Rollup</a></li> <li><a href="https://www.extend-chrome.dev/rollup-plugin" rel="nofollow noopener noreferrer external" target="_blank">Rollup-plugin-chrome-extension</a></li> <li><a href="https://tailwindcss.com/docs/configuration" rel="nofollow noopener noreferrer external" target="_blank">Tailwind CSS</a></li></ul> <div class="card bg-base-100 !bg-base-200 my-4"><div class="p-6"></div></div>]]>
    </content>
    <category term="TypeScript" scheme="https://blog.gothuey.dev/?tags=TypeScript" />
    <category term="Web" scheme="https://blog.gothuey.dev/?tags=Web" />
  </entry>
  <entry>
    <title type="html"><![CDATA[Give a second life to my 2011 Mac mini]]></title>
    <link href="https://blog.gothuey.dev/2023/mac-mini-as-homeserver" />
    <id>https://blog.gothuey.dev/2023/mac-mini-as-homeserver</id>
    <published>2023-02-09T00:00:00.000Z</published>
    <updated>2025-01-25T23:43:32.795Z</updated>
    <summary type="html"><![CDATA[Recycling your 2011 Mac mini into a Home lab Server]]></summary>
    <content type="html">
      <![CDATA[<blockquote data-svelte-h="svelte-1mdymf7"><p>Picture: Gaël G.</p></blockquote> <h2 id="introduction" data-svelte-h="svelte-ccveyw"><a href="#introduction">Introduction</a></h2> <p data-svelte-h="svelte-1y15kl">If you’re like me, you probably have an old <strong>Mac mini</strong> lying around that you no longer use. Instead of letting it gather dust, why not recycle it into a home server? That’s exactly what I did with my <strong>2011 Mac mini</strong>, and I’m happy to share the process with you.</p> <h2 id="hardware-upgrade" data-svelte-h="svelte-nr5h9g"><a href="#hardware-upgrade">Hardware upgrade</a></h2> <p data-svelte-h="svelte-msm3lk">First, I replaced the hard drive with an SSD. This decade-old device originally had 2GB of RAM, but I had already upgraded it to 8GB at the time. The SSD upgrade gave the machine a much-needed boost in speed and performance, making it more suitable for use as a home server. The whole thing is powered by an i5-2415M CPU from Intel Sandy Bridge architecture family. See technical specifications for more details: <a href="https://support.apple.com/kb/sp632" rel="nofollow noopener noreferrer external" target="_blank">Mac mini (Mid 2011) - Technical Specifications</a></p> <h2 id="set-up" data-svelte-h="svelte-1rgn96p"><a href="#set-up">Set up</a></h2> <h3 id="operating-system" data-svelte-h="svelte-t1et7m"><a href="#operating-system">Operating system</a></h3> <p data-svelte-h="svelte-cvi9t6">MacOS 10.13.6 High Sierra is the most recent and up-to-date OS that my mini can run. I replaced the operating system that is <a href="https://endoflife.date/macos" rel="nofollow noopener noreferrer external" target="_blank">no longer supported by Apple</a> with an Ubuntu 22.04 Server. This gave me access to all the latest server-side technologies and tools, and it also allowed me to customize the system to my liking.</p> <h3 id="reboot-on-power-failure" data-svelte-h="svelte-gcr30r"><a href="#reboot-on-power-failure">Reboot on power failure</a></h3> <p data-svelte-h="svelte-knnfrk">My Mac mini will automatically start up after a power failure, allowing me to boot my home server without manual intervention. On my Ubuntu system, I configured the kernel to automatically reboot after a power failure by using the following command:</p> <!-- HTML_TAG_START --><pre class="shiki material-default with-title" sh="true" title="/usr/local/bin/boot-on-power.sh"><div class='code-title'>/usr/local/bin/boot-on-power.sh</div><div class="language-id">sh</div><div class='code-container'><code><div class='line'>#!/bin/bash</div><div class='line'>setpci -s 0:1f.0 0xa4.b=0h</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h="svelte-b0svk">To my delight, the technique explains in this 2011 Blog post <a href="https://smackerelofopinion.blogspot.com/2011/09/mac-mini-rebooting-tweaks-setpci-s-01f0.html?showComment=1364653744596#c121835951350041303" rel="nofollow noopener noreferrer external" target="_blank">Mac Mini rebooting tweaks: setpci -s 0:1f.0 0xa4.b=0</a> worked perfectly for me and I was able to solve my problem quickly and efficiently. I would highly recommend checking out the article I mentioned. It provides a wealth of information on why I have changed theses values.</p> <p data-svelte-h="svelte-19lttw4">Unfortunately, this kernel tweak won’t stick around forever. Upon your next restart, the kernel will go back to its default settings and you’ll have to reapply the change. But hey, no worries! With a little bit of effort, you can make this tweak a permanent fixture in your setup.</p> <p data-svelte-h="svelte-dbh7q4">Ubuntu 22.04 is built on Systemd, so the most straightforward and suggested method for executing a script on startup is to create a Systemd service file. This allows you to run scripts, such as bash or python, through the service when the system boots. Here’s how to run my boot <code>boot-on-power.sh</code> script:</p> <ul data-svelte-h="svelte-1x4hj9m"><li><p>Create a new service file <code>/etc/systemd/system/your-service-name.service</code></p></li> <li><p>Enter the following content into the file, replacing “your-script.sh” with the path to your script and “User” with the username under which you want to run the script:</p></li></ul> <!-- HTML_TAG_START --><pre class="shiki material-default" sh="true"><div class="language-id">sh</div><div class='code-container'><code><div class='line'>[Unit]</div><div class='line'>After=network.target</div><div class='line'></div><div class='line'>[Service]</div><div class='line'>ExecStart=/usr/local/bin/boot-on-power.sh</div><div class='line'></div><div class='line'>[Install]</div><div class='line'>WantedBy=default.target</div></code></div></pre><!-- HTML_TAG_END --> <ul data-svelte-h="svelte-1bvcggs"><li>Set correct permissions on both files</li></ul> <!-- HTML_TAG_START --><pre class="shiki material-default" sh="true"><div class="language-id">sh</div><div class='code-container'><code><div class='line'>sudo chmod 744 /usr/local/bin/boot-on-power.sh</div><div class='line'>sudo chmod 664 /etc/systemd/system/enabled-startup-on-power.service</div></code></div></pre><!-- HTML_TAG_END --> <ul data-svelte-h="svelte-kt7b98"><li>Reload the Systemd daemon to recognize the new service file with the following command</li></ul> <!-- HTML_TAG_START --><pre class="shiki material-default" sh="true"><div class="language-id">sh</div><div class='code-container'><code><div class='line'>sudo systemctl daemon-reload</div><div class='line'>sudo systemctl enable enabled-startup-on-power.service</div></code></div></pre><!-- HTML_TAG_END --> <h2 id="containers" data-svelte-h="svelte-kjbcgw"><a href="#containers">Containers</a></h2> <p data-svelte-h="svelte-6fhs0z">The resource constraints in my home lab prevent me from running multiple virtual machines using solutions like Proxmox or VMWare. In other words, my home lab setup doesn’t have the juice to handle that kind of setup.</p> <p data-svelte-h="svelte-mf5jp8">As a home server administrator, I have always strived to keep my infrastructure as easy and simple as possible. One way I have found to do this is by using containers to run all of my services. With containers, you can simply pull down the images you need and run them on your server. This makes it much easier to set up and manage multiple services on a single host. A future article will present you the services that are installed on my server.</p> <h2 id="final-thoughts" data-svelte-h="svelte-2qh8hi"><a href="#final-thoughts">Final thoughts</a></h2> <p data-svelte-h="svelte-f8a0n5">Overall, turning my old Mac mini into a home server was a fun and rewarding project. Not only did it give my old machine a new lease on life, but it also provided me with a powerful and reliable home server that I can use for all sorts of tasks. If you have an old Mac mini that you’re not using, I highly recommend giving a second life to your old device a try as a Home!</p> <h2 id="useful-resources-" data-svelte-h="svelte-z3y4n5"><a href="#useful-resources-">Useful resources ✨</a></h2> <ul data-svelte-h="svelte-qxxlad"><li><a href="https://smackerelofopinion.blogspot.com/2011/09/mac-mini-rebooting-tweaks-setpci-s-01f0.html?showComment=1364653744596#c121835951350041303" rel="nofollow noopener noreferrer external" target="_blank">Mac Mini rebooting tweaks: setpci -s 0:1f.0 0xa4.b=0</a></li> <li><a href="https://linuxconfig.org/how-to-run-script-on-startup-on-ubuntu-22-04-jammy-jellyfish-server-desktop" rel="nofollow noopener noreferrer external" target="_blank">How to run script on startup on Ubuntu 22.04 Jammy Jellyfish Server/Desktop</a></li></ul>]]>
    </content>
    <category term="Home lab" scheme="https://blog.gothuey.dev/?tags=Home%20lab" />
    <category term="Container" scheme="https://blog.gothuey.dev/?tags=Container" />
  </entry>
  <entry>
    <title type="html"><![CDATA[Swiss deals API]]></title>
    <link href="https://blog.gothuey.dev/2022/swiss-deals-api" />
    <id>https://blog.gothuey.dev/2022/swiss-deals-api</id>
    <published>2022-10-20T00:00:00.000Z</published>
    <updated>2025-01-25T23:43:32.791Z</updated>
    <summary type="html"><![CDATA[An API that aggregates the offers of the day]]></summary>
    <content type="html">
      <![CDATA[<blockquote data-svelte-h="svelte-1mdymf7"><p>Picture: Gaël G.</p></blockquote> <h2 id="introduction" data-svelte-h="svelte-ccveyw"><a href="#introduction">Introduction</a></h2> <p data-svelte-h="svelte-1x83gf8">A friend of mine told me how he missed out on a fantastic offer on a gaming monitor he really wanted. Then, he wondered if there was a platform that collected the deals of the day on the online stores that do it. We can mention the website <a href="https://www.piratesdesprix.ch/" rel="nofollow noopener noreferrer external" target="_blank">piratesdesprix.ch</a> which lists different deals from several shops. However, they did not have the stores we were interested in, namely <strong>QoQa</strong>, <strong>Digitec</strong> and <strong>Galaxus</strong>. It is from here that I had the idea to create a small service that aggregates the deals of the day!</p> <div class="alert shadow-inner" data-svelte-h="svelte-705foz"><div><span class="text-lg i-simple-icons-github !w-5 !h-5"></span> <div><a href="https://github.com/gaelgoth/swiss-deals-api"><h3 class="font-bold my-0">gaelgoth/swiss-deals-api</h3></a> <div class="text-xs">Aggregate deals of the day from Digitec, Galaxus, QoQa</div></div></div></div> <h2 id="building-api-with-golang" data-svelte-h="svelte-19l9l3y"><a href="#building-api-with-golang">Building API with Golang</a></h2> <p data-svelte-h="svelte-14m7h0t">Used to create backend in Python or TypeScript/JavaScript, this is a good opportunity for me to try Golang. Before we start coding the API, we need to figure out how to get the information we need. Then we will set up the Go dev environnement. Finally, we will be able to retrieve data from <strong>QoQa</strong>, <strong>Digitec</strong> and <strong>Galaxus</strong>.</p> <h3 id="retrieve-data" data-svelte-h="svelte-cnelg2"><a href="#retrieve-data">Retrieve data</a></h3> <p data-svelte-h="svelte-jzi3pt">Let’s do some reverse engineering to find the best way to get the information about the offer of the day.</p> <p>Let’s get started with <strong data-svelte-h="svelte-1q6601m">QoQa</strong>. By analyzing the traffic when we load the page, we can easily notice the <code data-svelte-h="svelte-znbjfg">http</code> request that serves us the promotion of the day.<picture><source srcset="/_app/immutable/assets/qoqa-http-product.BiPEI73A.avif 736w" type="image/avif"> <img src="/2022/swiss-deals-api/qoqa-http-product.webp" alt="Get http deal from QoQa" class="rounded-lg my-2" loading="lazy" decoding="async"></picture></p> <p data-svelte-h="svelte-dmyvvl">Basically, we found out that the following Request URL give use the deals: <code>https://api.qoqa.ch/v2/websites/wwwqoqach/offer_preview</code>. The <code>wwwqoqach</code> identifier can be retrieved from the following endpoint: <code>https://api.qoqa.ch/v2/websites</code></p> <!-- HTML_TAG_START --><pre class="shiki material-default" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'># get identifiers list</div><div class='line'>curl https://api.qoqa.ch/v2/websites | jq</div><div class='line'></div><div class='line'># get current deals by replacing &lt;identifier&gt;</div><div class='line'>curl https://api.qoqa.ch/v2/websites/&lt;identifier&gt;/offer_preview</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h="svelte-870swl">Unfortunately for Digitec and co, this is a different matter. The offer of the day is displayed via several GraphQL queries. I am not very familiar with GraphQL, so for Digitec the idea is to scrape the <a href="https://www.digitec.ch/fr/liveshopping/81" rel="nofollow noopener noreferrer external" target="_blank">page</a> that gives us the offer of the day.</p> <h3 id="golang-frameworks" data-svelte-h="svelte-qcfm85"><a href="#golang-frameworks">Golang frameworks</a></h3> <p data-svelte-h="svelte-5vrki4">In a nutshell, we require web frameworks that support HTTP methods and HTML scraping in order to build this API. <a href="https://deals-api.gothuey.dev/" rel="nofollow noopener noreferrer external" target="_blank">Swiss Deals API</a> will based on <a href="https://github.com/gofiber/fiber" rel="nofollow noopener noreferrer external" target="_blank">Fiber</a> that is an <a href="https://expressjs.com/" rel="nofollow noopener noreferrer external" target="_blank">Express</a> inspired web framework written in Go. We’ll utilize <a href="https://github.com/gocolly/colly" rel="nofollow noopener noreferrer external" target="_blank">Coly</a>, an elegant scraper and crawler framework for Golang, to extract web site content. To power this API other <a href="https://github.com/gaelgoth/swiss-deals-api/blob/4d95d7477ddd8176541f05d7a77dafd3f1320ccb/main.go#L3-L17" rel="nofollow noopener noreferrer external" target="_blank">sub-tools</a> are exploited for swagger documentation, query caching and logging.</p> <p><img src="/2022/swiss-deals-api/swiss-deals-diagramm.svg" alt="How Swiss deals will work" class="rounded-lg my-2" loading="lazy" decoding="async"></p> <h3 id="environnement" data-svelte-h="svelte-1jie8ts"><a href="#environnement">Environnement</a></h3> <p data-svelte-h="svelte-u1k7oa">The development environment with Golang is relatively easy to set up. I tested several alternatives:</p> <ul data-svelte-h="svelte-1rc2978"><li><strong>Makefile</strong>: The startup task runs the command <code>go run main.go</code> and writes its process ID to PID_FILE.</li> <li><strong>Docker-compose.dev</strong>: Run the Golang build inside a container coupled with <a href="https://github.com/cosmtrek/air" rel="nofollow noopener noreferrer external" target="_blank">Air</a> for hot reloading when editing the code from IDE</li> <li><strong>Air</strong> (the easiest one): As described by his creator, just <code>air</code> command in your project root directory, leave it alone, and focus on your code.</li></ul> <p data-svelte-h="svelte-ty4g2s">Everything is ready, let’s see what <a href="https://deals-api.gothuey.dev/" rel="nofollow noopener noreferrer external" target="_blank">Swiss Deals API</a> can accomplish after a few hours of code.</p> <h2 id="demo" data-svelte-h="svelte-18ssa5v"><a href="#demo">Demo</a></h2> <p data-svelte-h="svelte-1x8wwde">At the time of writing, the API serves two groups of endpoints, “QoQa” and “Digitec”.</p> <!-- HTML_TAG_START --><pre class="shiki material-default" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'>$ curl https://deals-api.gothuey.dev/api/deals/digitec | jq</div><div class='line'>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</div><div class='line'>                                 Dload  Upload   Total   Spent    Left  Speed</div><div class='line'>100   389  100   389    0     0    805      0 --:--:-- --:--:-- --:--:--   805</div><div class='line'>&#123;</div><div class='line'>  "store": "Digitec",</div><div class='line'>  "title": "Netgear RBK353 Orbi WiFi 6 Dual Band set de 3",</div><div class='line'>  "url": "https://www.digitec.ch/liveshopping/",</div><div class='line'>  "remaining_stock": 61,</div><div class='line'>  "stock": 150,</div><div class='line'>  "offer_price": 179,</div><div class='line'>  "regular_price": 267,</div><div class='line'>  "image_url": "https://www.digitec.ch/im/files/..."</div><div class='line'>&#125;</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h="svelte-6pc6u6">You can interact with <a href="https://deals-api.gothuey.dev/" rel="nofollow noopener noreferrer external" target="_blank">Swiss Deals API</a> by consulting the Swagger documentation on <a href="https://deals-api.gothuey.dev/swagger/index.html" rel="nofollow noopener noreferrer external" target="_blank">https://deals-api.gothuey.dev/swagger/index.html</a>.</p> <h2 id="final-thoughts" data-svelte-h="svelte-2qh8hi"><a href="#final-thoughts">Final thoughts</a></h2> <p data-svelte-h="svelte-18uouji">I was able to learn Golang programming through this short project. Along with improving the quality of the code, my goal is to increase the variety of offers the API returns.</p> <h2 id="next-steps" data-svelte-h="svelte-1fvwda2"><a href="#next-steps">Next steps</a></h2> <ul class="contains-task-list" data-svelte-h="svelte-1y923uj"><li class="task-list-item"><input type="checkbox" checked disabled> Set up a frontend to make access to deals more welcoming</li> <li class="task-list-item"><input type="checkbox" disabled> Improve errors handling</li> <li class="task-list-item"><input type="checkbox" disabled> Add deals from other online stores<ul class="contains-task-list"><li class="task-list-item"><input type="checkbox" disabled> piratesdesprix.ch</li> <li class="task-list-item"><input type="checkbox" disabled> steg-electronics.ch</li> <li class="task-list-item"><input type="checkbox" disabled> microspot.ch</li> <li class="task-list-item"><input type="checkbox" disabled> …</li></ul></li></ul>]]>
    </content>
    <category term="API" scheme="https://blog.gothuey.dev/?tags=API" />
    <category term="Go" scheme="https://blog.gothuey.dev/?tags=Go" />
  </entry>
  <entry>
    <title type="html"><![CDATA[Yup, an other blog]]></title>
    <link href="https://blog.gothuey.dev/2022/yup-an-other-blog" />
    <id>https://blog.gothuey.dev/2022/yup-an-other-blog</id>
    <published>2022-08-01T00:00:00.000Z</published>
    <updated>2025-01-25T23:43:32.793Z</updated>
    <summary type="html"><![CDATA[Hello World! 👋🏽]]></summary>
    <content type="html">
      <![CDATA[<blockquote data-svelte-h="svelte-1mdymf7"><p>Picture: Gaël G.</p></blockquote> <h2 id="hello-world-" data-svelte-h="svelte-1z0bwra"><a href="#hello-world-">Hello World! 👋🏽</a></h2> <p data-svelte-h="svelte-1dq5onl">Hello, I’m Gaël and welcome to my technical blog.</p> <h3 id="about-me" data-svelte-h="svelte-18liepv"><a href="#about-me">About me</a></h3> <p data-svelte-h="svelte-16yj956">I am from Switzerland and currently work as a DevOps engineer. The piece of code below which displays a random bio, summarizes the things that interest me.</p> <!-- HTML_TAG_START --><pre class="shiki material-default" ts="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line'>const bio = [</div><div class='line'>  'Devops Engineer from Switzerland, Lausanne',</div><div class='line'>  'Devops Engineer based in Switzerland',</div><div class='line'>  'Devops Engineer who loves old school Hip-Hop',</div><div class='line'>  'Devops Engineer, photographer lover',</div><div class='line'>  'Devops Engineer who likes sick and fresh UI',</div><div class='line'>  'Devops Engineer fan of The Los Angeles Lakers',</div><div class='line'>  'Devops Engineer who likes to watch the Formula 1 Grand Prix on Sunday',</div><div class='line'>]</div><div class='line'></div><div class='line'>  author: &#123;</div><div class='line'>    name: 'Gaël G.',</div><div class='line'>    avatar: '/assets/profile.webp',</div><div class='line'>    status: '👋🏽',</div><div class='line'>    bio: bio[~~(Math.random() * bio.length)],</div><div class='line'>   ...</div><div class='line'>  &#125;,</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h="svelte-11hkaha">See it in action by pressing <kbd>F5</kbd>  from the home page.</p> <h3 id="scope" data-svelte-h="svelte-1qxqadg"><a href="#scope">Scope</a></h3> <p data-svelte-h="svelte-1t7ush5">I will post about the following topic:</p> <ul data-svelte-h="svelte-arolyv"><li>CI/CD</li> <li>Linux/Ops</li> <li>Python, Golang</li> <li>Web Development</li> <li>Github Actions, GitLab CI/CD</li> <li>Photography and other</li></ul> <h3 id="everything-is-markdown" data-svelte-h="svelte-1yfcc86"><a href="#everything-is-markdown">Everything is Markdown</a></h3> <p data-svelte-h="svelte-2t4xpq">To be correct, this is not a blog as such. This website it’s more like my public note-taking directory. I take my notes using <a href="https://obsidian.md/" rel="nofollow noopener noreferrer external" target="_blank">Obsidian</a> tool which uses <code>Markdown</code> text formatting. This blog is powered by the Urara project which also based on <code>.md</code> files. Thanks to a bit of automation with Github actions, it allows me to easily create/edit a new article on <a href="https://blog.gothuey.dev/" rel="nofollow noopener noreferrer external" target="_blank">blog.gothuey.dev</a>.</p> <div class="alert shadow-inner" data-svelte-h="svelte-vgr7wg"><div><span class="text-lg i-simple-icons-github !w-5 !h-5"></span> <div><a href="https://github.com/importantimport/urara"><h3 class="font-bold my-0">importantimport/urara</h3></a> <div class="text-xs">🌸 Sweet, Powerful, IndieWeb-Compatible SvelteKit Blog Starter. [δ](Delta)</div></div></div></div> <h3 id="final-word" data-svelte-h="svelte-s1h4gy"><a href="#final-word">Final word</a></h3> <p data-svelte-h="svelte-1sm2fyc">Let’s see where this small blog will go.</p>]]>
    </content>
  </entry>
</feed>